"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _style = _interopRequireDefault(require("./style"));
var _config = require("../../config");
var _ScreenClassResolver = _interopRequireDefault(require("../../context/ScreenClassResolver"));
var _primitives = require("../../primitives");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const Container = /*#__PURE__*/_react.default.forwardRef((_ref, ref) => {
  let {
    children,
    fluid,
    xs,
    sm,
    md,
    lg,
    xl,
    xxl,
    xxxl,
    style,
    component,
    ...otherProps
  } = _ref;
  return /*#__PURE__*/_react.default.createElement(_ScreenClassResolver.default, null, screenClass => /*#__PURE__*/(0, _react.createElement)(component, {
    ref,
    style: (0, _style.default)({
      fluid,
      xs,
      sm,
      md,
      lg,
      xl,
      xxl,
      xxxl,
      screenClass,
      containerWidths: (0, _config.getConfiguration)().containerWidths,
      gutterWidth: (0, _config.getConfiguration)().gutterWidth,
      moreStyle: style
    }),
    ...otherProps
  }, children));
});
Container.propTypes = {
  /**
   * Content of the component
   */
  children: _propTypes.default.node.isRequired,
  /**
   * True makes the container full-width, false fixed-width
   */
  fluid: _propTypes.default.bool,
  /**
   * This is in combination with fluid enabled
   * True makes container fluid only in xs, not present means fluid everywhere
   */
  xs: _propTypes.default.bool,
  /**
   * This is in combination with fluid enabled
   * True makes container fluid only in sm, not present means fluid everywhere
   */
  sm: _propTypes.default.bool,
  /**
   * This is in combination with fluid enabled
   * True makes container fluid only in md, not present means fluid everywhere
   */
  md: _propTypes.default.bool,
  /**
   * This is in combination with fluid enabled
   * True makes container fluid only in lg, not present means fluid everywhere
   */
  lg: _propTypes.default.bool,
  /**
   * This is in combination with fluid enabled
   * True makes container fluid only in xl, not present means fluid everywhere
   */
  xl: _propTypes.default.bool,
  /**
   * This is in combination with fluid enabled
   * True makes container fluid only in xxl, not present means fluid everywhere
   */
  xxl: _propTypes.default.bool,
  /**
   * This is in combination with fluid enabled
   * True makes container fluid only in xxxl, not present means fluid everywhere
   */
  xxxl: _propTypes.default.bool,
  /**
   * Optional styling
   */
  style: _propTypes.default.objectOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])),
  /**
   * Use your own component
   */
  component: _propTypes.default.elementType
};
Container.defaultProps = {
  fluid: false,
  xs: false,
  sm: false,
  md: false,
  lg: false,
  xl: false,
  xxl: false,
  xxxl: false,
  style: {},
  component: _primitives.Div
};
Container.displayName = "Container";
var _default = Container;
exports.default = _default;