"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ScreenClassContext = exports.NO_PROVIDER_FLAG = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _utils = require("../../utils");
var _config = require("../../config");
var _primitives = require("../../primitives");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const NO_PROVIDER_FLAG = 'NO_PROVIDER_FLAG';
exports.NO_PROVIDER_FLAG = NO_PROVIDER_FLAG;
const ScreenClassContext = /*#__PURE__*/_react.default.createContext(NO_PROVIDER_FLAG);
exports.ScreenClassContext = ScreenClassContext;
const ScreenClassProvider = _ref => {
  let {
    useOwnWidth,
    children,
    fallbackScreenClass
  } = _ref;
  const screenClassRef = (0, _react.useRef)();
  const [mounted, setMounted] = (0, _react.useState)(false);
  const detectedScreenClass = (0, _utils.useScreenClass)(screenClassRef, fallbackScreenClass);
  const {
    defaultScreenClass
  } = (0, _config.getConfiguration)();
  const screenClass = mounted ? detectedScreenClass : fallbackScreenClass || defaultScreenClass;
  (0, _react.useEffect)(() => setMounted(true), []);
  return /*#__PURE__*/_react.default.createElement(ScreenClassContext.Provider, {
    value: screenClass
  }, useOwnWidth ? /*#__PURE__*/_react.default.createElement(_primitives.Div, {
    ref: useOwnWidth ? screenClassRef : null
  }, children) : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, children));
};
ScreenClassProvider.propTypes = {
  /**
   * Children of the ScreenClassProvider.
   * This should be all your child React nodes that are using `react-grid-system`.
   */
  children: _propTypes.default.node.isRequired,
  /**
   * Boolean to determine whether own width should be used as source.
   * When provided, the screen class is derived from own dimensions instead of the window.
   */
  useOwnWidth: _propTypes.default.bool,
  /**
   * Screen class to use when it cannot be determined otherwise.
   * Useful for server side rendering.
   */
  fallbackScreenClass: _propTypes.default.oneOf([null, 'xs', 'sm', 'md', 'lg', 'xl', 'xxl', 'xxxl'])
};
ScreenClassProvider.defaultProps = {
  useOwnWidth: false,
  fallbackScreenClass: null
};
var _default = ScreenClassProvider;
exports.default = _default;